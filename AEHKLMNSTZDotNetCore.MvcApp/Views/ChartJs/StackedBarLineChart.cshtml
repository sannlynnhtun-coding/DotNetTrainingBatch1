@model ChartJsStackedBarLineChartResponseModel

@{
    List<int> _data1 = Model.DataSets[0].Data;
    List<int> _data2 = Model.DataSets[0].Data;
}

<div>
    <canvas id="myChart"></canvas>
</div>

@section scripts {
    <script>
        const ctx = document.getElementById('myChart');
        const DATA_COUNT = @Model.DataCount;
        const NUMBER_CFG = { count: DATA_COUNT, min: 0, max: 100 };

        const labels = @Html.Raw(JsonConvert.SerializeObject(Model.Labels));
        const data = {
            labels: labels,
            datasets: [
                {
                    label: "@Model.DataSets[0].Label",
                    data: @Html.Raw(JsonConvert.SerializeObject(_data1)),
                    borderColor: "@Model.DataSets[0].BorderColor",
                    backgroundColor: "@Model.DataSets[0].BackgroundColor",
                    stack: 'combined',
                    type: 'bar'
                },
                {
                    label: "@Model.DataSets[1].Label",
                    data: @Html.Raw(JsonConvert.SerializeObject(_data2)) ,
                    borderColor: "@Model.DataSets[1].BorderColor",
                    backgroundColor: "@Model.DataSets[1].BackgroundColor",
                    stack: 'combined'
                }
            ]
        };

        const config = {
            type: 'line',
            data: data,
            options: {
                plugins: {
                    title: {
                        display: true,
                        text: 'Chart.js Stacked Line/Bar Chart'
                    }
                },
                scales: {
                    y: {
                        stacked: true
                    }
                }
            },
        };

        new Chart(ctx, config);
    </script>
}